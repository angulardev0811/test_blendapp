{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from \"react\";\nimport axios from \"axios\";\nimport { Modal, Autocomplete, InlineError, Stack, DropZone, TextField, Layout, Card, TextStyle, ResourceList, Thumbnail } from \"@shopify/polaris\";\nexport default function Background() {\n  //Get Image Data\n  let backgroundData = {};\n  let backgroundCategory = [];\n  getImageData();\n  const {\n    0: imageItems,\n    1: setimageItems\n  } = useState([]);\n\n  async function getImageData() {\n    await axios.get(\"http://localhost:3000/background\").then(res => {\n      backgroundData = res.data;\n      let allCategorys = [];\n\n      for (let i in backgroundData) {\n        allCategorys.push(backgroundData[i].category);\n      }\n\n      let filterCategory = allCategorys.filter(function (elem, index, self) {\n        return index === self.indexOf(elem);\n      });\n\n      for (let i in filterCategory) {\n        backgroundCategory.push({\n          value: filterCategory[i],\n          label: filterCategory[i]\n        });\n      }\n    });\n    let imageItemsData = [];\n\n    for (let i in backgroundData) {\n      let item = backgroundData[i];\n      imageItemsData.push({\n        id: item._id,\n        name: item.filename,\n        category: item.category,\n        media: __jsx(Thumbnail, {\n          source: item.filepath,\n          alt: item.filename\n        })\n      });\n    }\n\n    console.log(imageItemsData);\n    return imageItemsData;\n  } // Modal\n\n\n  const {\n    0: activeModal,\n    1: setActiveModal\n  } = useState(false);\n  const handleChange = useCallback(() => setActiveModal(!activeModal), [activeModal]); //Modal Upload File\n\n  const {\n    0: openFileDialog,\n    1: setOpenFileDialog\n  } = useState(false);\n  const {\n    0: file,\n    1: setFile\n  } = useState();\n  const {\n    0: imageError,\n    1: setImageError\n  } = useState(\"\");\n\n  function handleImageError(txt) {\n    setImageError(txt);\n  }\n\n  const toggleOpenFileDialog = useCallback(() => setOpenFileDialog(openFileDialog => !openFileDialog), []);\n  const validImageTypes = [\"image/gif\", \"image/jpeg\", \"image/png\"];\n  const handleDropZoneDrop = useCallback((_dropFiles, acceptedFiles, _rejectedFiles) => {\n    setFile(file => acceptedFiles[0]);\n    setImageError(\"\");\n  }, []);\n\n  const fileUpload = !file && __jsx(DropZone.FileUpload, null);\n\n  const uploadedFile = file && __jsx(Stack, null, __jsx(Thumbnail, {\n    size: \"large\",\n    alt: file.name,\n    source: validImageTypes.indexOf(file.type) > 0 ? window.URL.createObjectURL(file) : \"https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304\"\n  })); //Modal Image Name\n\n\n  const {\n    0: imageName,\n    1: setimageName\n  } = useState(\"\");\n  const {\n    0: imageNameError,\n    1: setImageNameError\n  } = useState(\"\");\n  const handleImageName = useCallback(newValue => {\n    setimageName(newValue);\n    handleImageNameError(\"\");\n  }, []);\n\n  function handleImageNameError(txt) {\n    setImageNameError(txt);\n  } //Modal Category\n\n\n  let categoryOptions = backgroundCategory;\n  const {\n    0: selectedOptions,\n    1: setSelectedOptions\n  } = useState([]);\n  const {\n    0: categoryValue,\n    1: setCategoryValue\n  } = useState(\"\");\n  const {\n    0: options,\n    1: setOptions\n  } = useState(categoryOptions);\n  const {\n    0: imageCategoryError,\n    1: setCategoryError\n  } = useState(\"\");\n\n  function handleCategoryError(txt) {\n    setCategoryError(txt);\n  }\n\n  const updateText = useCallback(value => {\n    setCategoryValue(value);\n\n    if (value === \"\") {\n      setOptions(categoryOptions);\n      return;\n    }\n\n    const filterRegex = new RegExp(value, \"i\");\n    const resultOptions = categoryOptions.filter(option => option.label.match(filterRegex));\n    setOptions(resultOptions);\n    setCategoryError(\"\");\n  }, [categoryOptions]);\n  const updateSelection = useCallback(selected => {\n    updateText(selected[0]);\n    setSelectedOptions(selected);\n    setCategoryValue(selected[0]);\n  }, []);\n\n  const textField = __jsx(Autocomplete.TextField, {\n    onChange: updateText,\n    label: \"Image Category\",\n    value: categoryValue,\n    placeholder: \"Enter category\",\n    error: imageCategoryError\n  }); //Submit Image Data\n\n\n  const handleImages = () => {\n    if (file === undefined && imageName === \"\" && categoryValue === \"\") {\n      handleImageError(\"Need Image\");\n      handleImageNameError(\"Need Image Name\");\n      handleCategoryError(\"Need Category\");\n      return;\n    } else if (file === undefined && imageName === \"\") {\n      handleImageError(\"Need Image\");\n      handleImageNameError(\"Need Image Name\");\n    } else if (file === undefined && categoryValue === \"\") {\n      handleImageError(\"Need Image\");\n      handleCategoryError(\"Need Category\");\n    } else if (imageName === \"\" && categoryValue === \"\") {\n      handleImageNameError(\"Need Image Name\");\n      handleCategoryError(\"Need Category\");\n    }\n\n    if (file === undefined) {\n      handleImageError(\"Need Image\");\n      return;\n    }\n\n    if (imageName === \"\") {\n      handleImageNameError(\"Need Image Name\");\n      return;\n    }\n\n    if (categoryValue === \"\") {\n      handleCategoryError(\"Need Category\");\n      return;\n    }\n\n    let formdata = new FormData();\n    formdata.append(\"file\", file);\n    formdata.append(\"filename\", imageName);\n    formdata.append(\"category\", categoryValue);\n    axios.post(\"http://localhost:3000/background\", formdata, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      if (res.data === \"success\") {\n        setActiveModal(false);\n      } else {\n        console.log(res.data);\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Background Images\",\n    actions: [{\n      content: \"Add Background Image\",\n      onAction: handleChange\n    }]\n  }, __jsx(Card.Section, null, __jsx(TextStyle, {\n    variation: \"subdued\"\n  }, \"455 units available\")), __jsx(Card.Section, {\n    title: \"Items\"\n  }, __jsx(ResourceList, {\n    resourceName: {\n      singular: \"image\",\n      plural: \"images\"\n    },\n    items: imageItems,\n    renderItem: item => {\n      const {\n        id,\n        name,\n        media,\n        category\n      } = item;\n      return __jsx(ResourceList.Item, {\n        id: id,\n        media: media,\n        accessibilityLabel: `View details for ${name}`\n      }, __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 12\n        }\n      }, \"Name: \"), name)), __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 12\n        }\n      }, \"Category: \"), category)));\n    }\n  }))))), __jsx(Modal, {\n    open: activeModal,\n    onClose: handleChange,\n    title: \"Add Image\",\n    primaryAction: {\n      content: \"Add\",\n      onAction: handleImages\n    },\n    style: {\n      padding: \"20px\"\n    }\n  }, __jsx(Modal.Section, null, __jsx(Stack, {\n    alignment: \"center\"\n  }, __jsx(Stack.Item, null, __jsx(\"div\", {\n    style: {\n      width: 100,\n      height: 100\n    }\n  }, __jsx(DropZone, {\n    openFileDialog: openFileDialog,\n    onDrop: handleDropZoneDrop,\n    onFileDialogClose: toggleOpenFileDialog\n  }, fileUpload, uploadedFile), __jsx(InlineError, {\n    message: imageError\n  }))), __jsx(Stack.Item, null, __jsx(TextField, {\n    label: \"Image Name\",\n    value: imageName,\n    onChange: handleImageName,\n    placeholder: \"Enter image name\",\n    error: imageNameError\n  })), __jsx(Stack.Item, null, __jsx(Autocomplete, {\n    options: options,\n    selected: selectedOptions,\n    onSelect: updateSelection,\n    textField: textField\n  }))))));\n}","map":{"version":3,"sources":["E:/Lenny/blendapp/pages/index.js"],"names":["React","useCallback","useState","axios","Modal","Autocomplete","InlineError","Stack","DropZone","TextField","Layout","Card","TextStyle","ResourceList","Thumbnail","Background","backgroundData","backgroundCategory","getImageData","imageItems","setimageItems","get","then","res","data","allCategorys","i","push","category","filterCategory","filter","elem","index","self","indexOf","value","label","imageItemsData","item","id","_id","name","filename","media","filepath","console","log","activeModal","setActiveModal","handleChange","openFileDialog","setOpenFileDialog","file","setFile","imageError","setImageError","handleImageError","txt","toggleOpenFileDialog","validImageTypes","handleDropZoneDrop","_dropFiles","acceptedFiles","_rejectedFiles","fileUpload","uploadedFile","type","window","URL","createObjectURL","imageName","setimageName","imageNameError","setImageNameError","handleImageName","newValue","handleImageNameError","categoryOptions","selectedOptions","setSelectedOptions","categoryValue","setCategoryValue","options","setOptions","imageCategoryError","setCategoryError","handleCategoryError","updateText","filterRegex","RegExp","resultOptions","option","match","updateSelection","selected","textField","handleImages","undefined","formdata","FormData","append","post","headers","content","onAction","singular","plural","fontSize","padding","width","height"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Modal,\r\n  Autocomplete,\r\n  InlineError,\r\n  Stack,\r\n  DropZone,\r\n  TextField,\r\n  Layout,\r\n  Card,\r\n  TextStyle,\r\n  ResourceList,\r\n  Thumbnail\r\n} from \"@shopify/polaris\";\r\n\r\nexport default function Background() {\r\n  //Get Image Data\r\n  let backgroundData = {};\r\n  let backgroundCategory = [];\r\n  getImageData()\r\n  const [imageItems, setimageItems] = useState([])\r\n  async function getImageData() {\r\n    await axios.get(\"http://localhost:3000/background\").then(res => {\r\n      backgroundData = res.data;\r\n      let allCategorys = [];\r\n      for (let i in backgroundData) {\r\n        allCategorys.push(backgroundData[i].category);\r\n      }\r\n      let filterCategory = allCategorys.filter(function(elem, index, self) {\r\n        return index === self.indexOf(elem);\r\n      });\r\n      for (let i in filterCategory) {\r\n        backgroundCategory.push({\r\n          value: filterCategory[i],\r\n          label: filterCategory[i]\r\n        });\r\n      }\r\n    });\r\n    let imageItemsData=[];\r\n    for (let i in backgroundData) {\r\n      let item = backgroundData[i];\r\n      imageItemsData.push({\r\n        id: item._id,\r\n        name: item.filename,\r\n        category: item.category,\r\n        media: <Thumbnail source={item.filepath} alt={item.filename} />\r\n      });\r\n    }\r\n    console.log(imageItemsData)\r\n    return imageItemsData;\r\n  }\r\n\r\n  // Modal\r\n  const [activeModal, setActiveModal] = useState(false);\r\n  const handleChange = useCallback(() => setActiveModal(!activeModal), [\r\n    activeModal\r\n  ]);\r\n\r\n  //Modal Upload File\r\n  const [openFileDialog, setOpenFileDialog] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [imageError, setImageError] = useState(\"\");\r\n  function handleImageError(txt) {\r\n    setImageError(txt);\r\n  }\r\n  const toggleOpenFileDialog = useCallback(\r\n    () => setOpenFileDialog(openFileDialog => !openFileDialog),\r\n    []\r\n  );\r\n  const validImageTypes = [\"image/gif\", \"image/jpeg\", \"image/png\"];\r\n  const handleDropZoneDrop = useCallback(\r\n    (_dropFiles, acceptedFiles, _rejectedFiles) => {\r\n      setFile(file => acceptedFiles[0]);\r\n      setImageError(\"\");\r\n    },\r\n    []\r\n  );\r\n  const fileUpload = !file && <DropZone.FileUpload />;\r\n  const uploadedFile = file && (\r\n    <Stack>\r\n      <Thumbnail\r\n        size=\"large\"\r\n        alt={file.name}\r\n        source={\r\n          validImageTypes.indexOf(file.type) > 0\r\n            ? window.URL.createObjectURL(file)\r\n            : \"https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304\"\r\n        }\r\n      />\r\n    </Stack>\r\n  );\r\n\r\n  //Modal Image Name\r\n  const [imageName, setimageName] = useState(\"\");\r\n  const [imageNameError, setImageNameError] = useState(\"\");\r\n  const handleImageName = useCallback(newValue => {\r\n    setimageName(newValue);\r\n    handleImageNameError(\"\");\r\n  }, []);\r\n  function handleImageNameError(txt) {\r\n    setImageNameError(txt);\r\n  }\r\n\r\n  //Modal Category\r\n  let categoryOptions = backgroundCategory;\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [categoryValue, setCategoryValue] = useState(\"\");\r\n  const [options, setOptions] = useState(categoryOptions);\r\n  const [imageCategoryError, setCategoryError] = useState(\"\");\r\n\r\n  function handleCategoryError(txt) {\r\n    setCategoryError(txt);\r\n  }\r\n  const updateText = useCallback(\r\n    value => {\r\n      setCategoryValue(value);\r\n      if (value === \"\") {\r\n        setOptions(categoryOptions);\r\n        return;\r\n      }\r\n      const filterRegex = new RegExp(value, \"i\");\r\n      const resultOptions = categoryOptions.filter(option =>\r\n        option.label.match(filterRegex)\r\n      );\r\n      setOptions(resultOptions);\r\n      setCategoryError(\"\");\r\n    },\r\n    [categoryOptions]\r\n  );\r\n\r\n  const updateSelection = useCallback(selected => {\r\n    updateText(selected[0]);\r\n    setSelectedOptions(selected);\r\n    setCategoryValue(selected[0]);\r\n  }, []);\r\n\r\n  const textField = (\r\n    <Autocomplete.TextField\r\n      onChange={updateText}\r\n      label=\"Image Category\"\r\n      value={categoryValue}\r\n      placeholder=\"Enter category\"\r\n      error={imageCategoryError}\r\n    />\r\n  );\r\n\r\n  //Submit Image Data\r\n  const handleImages = () => {\r\n    if (file === undefined && imageName === \"\" && categoryValue === \"\") {\r\n      handleImageError(\"Need Image\");\r\n      handleImageNameError(\"Need Image Name\");\r\n      handleCategoryError(\"Need Category\");\r\n      return;\r\n    } else if (file === undefined && imageName === \"\") {\r\n      handleImageError(\"Need Image\");\r\n      handleImageNameError(\"Need Image Name\");\r\n    } else if (file === undefined && categoryValue === \"\") {\r\n      handleImageError(\"Need Image\");\r\n      handleCategoryError(\"Need Category\");\r\n    } else if (imageName === \"\" && categoryValue === \"\") {\r\n      handleImageNameError(\"Need Image Name\");\r\n      handleCategoryError(\"Need Category\");\r\n    }\r\n    if (file === undefined) {\r\n      handleImageError(\"Need Image\");\r\n      return;\r\n    }\r\n    if (imageName === \"\") {\r\n      handleImageNameError(\"Need Image Name\");\r\n      return;\r\n    }\r\n    if (categoryValue === \"\") {\r\n      handleCategoryError(\"Need Category\");\r\n      return;\r\n    }\r\n    let formdata = new FormData();\r\n    formdata.append(\"file\", file);\r\n    formdata.append(\"filename\", imageName);\r\n    formdata.append(\"category\", categoryValue);\r\n    axios\r\n      .post(\"http://localhost:3000/background\", formdata, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.data === \"success\") {\r\n          setActiveModal(false);\r\n        } else {\r\n          console.log(res.data);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <Layout.Section>\r\n          <Card\r\n            title=\"Background Images\"\r\n            actions={[\r\n              {\r\n                content: \"Add Background Image\",\r\n                onAction: handleChange\r\n              }\r\n            ]}\r\n          >\r\n            <Card.Section>\r\n              <TextStyle variation=\"subdued\">455 units available</TextStyle>\r\n            </Card.Section>\r\n            <Card.Section title=\"Items\">\r\n              <ResourceList\r\n                resourceName={{ singular: \"image\", plural: \"images\" }}\r\n                items={imageItems}\r\n                renderItem={item => {\r\n                  const { id, name, media, category } = item;\r\n\r\n                  return (\r\n                    <ResourceList.Item\r\n                      id={id}\r\n                      media={media}\r\n                      accessibilityLabel={`View details for ${name}`}\r\n                    >\r\n                      <h3>\r\n                        <TextStyle variation=\"strong\">\r\n                          <span style={{ fontSize: 12 }}>Name: </span>\r\n                          {name}\r\n                        </TextStyle>\r\n                      </h3>\r\n                      <h3>\r\n                        <TextStyle variation=\"strong\">\r\n                          <span style={{ fontSize: 12 }}>Category: </span>\r\n                          {category}\r\n                        </TextStyle>\r\n                      </h3>\r\n                    </ResourceList.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </Card.Section>\r\n          </Card>\r\n        </Layout.Section>\r\n      </Layout>\r\n      <Modal\r\n        open={activeModal}\r\n        onClose={handleChange}\r\n        title=\"Add Image\"\r\n        primaryAction={{\r\n          content: \"Add\",\r\n          onAction: handleImages\r\n        }}\r\n        style={{ padding: \"20px\" }}\r\n      >\r\n        <Modal.Section>\r\n          <Stack alignment=\"center\">\r\n            <Stack.Item>\r\n              <div style={{ width: 100, height: 100 }}>\r\n                <DropZone\r\n                  openFileDialog={openFileDialog}\r\n                  onDrop={handleDropZoneDrop}\r\n                  onFileDialogClose={toggleOpenFileDialog}\r\n                >\r\n                  {fileUpload}\r\n                  {uploadedFile}\r\n                </DropZone>\r\n                <InlineError message={imageError} />\r\n              </div>\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <TextField\r\n                label=\"Image Name\"\r\n                value={imageName}\r\n                onChange={handleImageName}\r\n                placeholder=\"Enter image name\"\r\n                error={imageNameError}\r\n              />\r\n            </Stack.Item>\r\n            <Stack.Item>\r\n              <Autocomplete\r\n                options={options}\r\n                selected={selectedOptions}\r\n                onSelect={updateSelection}\r\n                textField={textField}\r\n              />\r\n            </Stack.Item>\r\n          </Stack>\r\n        </Modal.Section>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}