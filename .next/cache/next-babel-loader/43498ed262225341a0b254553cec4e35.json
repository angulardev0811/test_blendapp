{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Modal, Autocomplete, InlineError, Stack, DropZone, TextField, Layout, Card, TextStyle, ResourceList, Thumbnail } from \"@shopify/polaris\";\nexport default function Background() {\n  const {\n    0: flag,\n    1: setFlag\n  } = useState(0);\n  const {\n    0: backgroundData,\n    1: setBackgroundData\n  } = useState([]);\n  const {\n    0: backgroundCategory,\n    1: setBackgroundCategory\n  } = useState([]);\n  const {\n    0: imageItems,\n    1: setimageItems\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoding\n  } = useState(false);\n  const {\n    0: activeModal,\n    1: setActiveModal\n  } = useState(false);\n  const {\n    0: openFileDialog,\n    1: setOpenFileDialog\n  } = useState(false);\n  const {\n    0: file,\n    1: setFile\n  } = useState();\n  const {\n    0: imageError,\n    1: setImageError\n  } = useState(\"\");\n  const {\n    0: imageName,\n    1: setimageName\n  } = useState(\"\");\n  const {\n    0: imageNameError,\n    1: setImageNameError\n  } = useState(\"\");\n  const {\n    0: selectedOptions,\n    1: setSelectedOptions\n  } = useState([]);\n  const {\n    0: categoryValue,\n    1: setCategoryValue\n  } = useState(\"\");\n  const {\n    0: options,\n    1: setOptions\n  } = useState(backgroundCategory);\n  const {\n    0: imageCategoryError,\n    1: setCategoryError\n  } = useState(\"\");\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n  const handleChange = useCallback(() => setActiveModal(!activeModal), [activeModal]);\n  const toggleOpenFileDialog = useCallback(() => setOpenFileDialog(openFileDialog => !openFileDialog), []);\n  const validImageTypes = [\"image/gif\", \"image/jpeg\", \"image/png\"];\n  const handleDropZoneDrop = useCallback((_dropFiles, acceptedFiles, _rejectedFiles) => {\n    setFile(file => acceptedFiles[0]);\n    setImageError(\"\");\n  }, []);\n\n  const fileUpload = !file && __jsx(DropZone.FileUpload, null);\n\n  const uploadedFile = file && __jsx(Stack, null, __jsx(Thumbnail, {\n    size: \"large\",\n    alt: file.name,\n    source: validImageTypes.indexOf(file.type) > 0 ? window.URL.createObjectURL(file) : \"https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304\"\n  }));\n\n  const handleImageName = useCallback(newValue => {\n    setimageName(newValue);\n    setImageNameError(\"\");\n  }, []);\n  const updateText = useCallback(value => {\n    setCategoryValue(value);\n\n    if (value === \"\") {\n      setOptions(backgroundCategory);\n      return;\n    }\n\n    try {\n      const filterRegex = new RegExp(value, \"i\");\n      const resultOptions = backgroundCategory.filter(option => option.label.match(filterRegex));\n      setOptions(resultOptions);\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    setCategoryError(\"\");\n  }, [backgroundCategory]);\n  const updateSelection = useCallback(selected => {\n    updateText(selected[0]);\n    setSelectedOptions(selected);\n    setCategoryValue(selected[0]);\n  }, []);\n\n  const textField = __jsx(Autocomplete.TextField, {\n    onChange: updateText,\n    label: \"Image Category\",\n    value: categoryValue,\n    placeholder: \"Enter category\",\n    error: imageCategoryError\n  });\n\n  const modalInit = __jsx(Modal.Section, null, __jsx(Stack, {\n    alignment: \"center\"\n  }, __jsx(Stack.Item, null, __jsx(\"div\", {\n    style: {\n      width: 100,\n      height: 100\n    }\n  }, __jsx(DropZone, {\n    openFileDialog: openFileDialog,\n    onDrop: handleDropZoneDrop,\n    onFileDialogClose: toggleOpenFileDialog\n  }, fileUpload, uploadedFile), __jsx(InlineError, {\n    message: imageError\n  }))), __jsx(Stack.Item, null, __jsx(TextField, {\n    label: \"Image Name\",\n    value: imageName,\n    onChange: handleImageName,\n    placeholder: \"Enter image name\",\n    error: imageNameError\n  })), __jsx(Stack.Item, null, __jsx(Autocomplete, {\n    options: options,\n    selected: selectedOptions,\n    onSelect: updateSelection,\n    textField: textField\n  }))));\n\n  const {\n    0: modalData,\n    1: setModalData\n  } = useState(modalInit);\n\n  const editImages = () => {\n    let imageData = [];\n\n    for (let i in selectedItems) {\n      let selectedItem = selectedItems[i];\n\n      for (let j in backgroundData) {\n        let dataItem = backgroundData[j];\n\n        if (selectedItem === dataItem._id) {\n          imageData.push(dataItem);\n        }\n      }\n    }\n\n    const listItems = imageData.map(item => __jsx(Modal.Section, null, __jsx(Stack, {\n      alignment: \"center\"\n    }, __jsx(Stack.Item, null, __jsx(\"div\", {\n      style: {\n        width: 100,\n        height: 100\n      }\n    }, __jsx(DropZone, {\n      openFileDialog: openFileDialog,\n      onDrop: handleDropZoneDrop,\n      onFileDialogClose: toggleOpenFileDialog\n    }, __jsx(Stack, null, __jsx(Thumbnail, {\n      size: \"large\",\n      alt: item.filename,\n      source: item.filepath\n    }))), __jsx(InlineError, {\n      message: imageError\n    }))), __jsx(Stack.Item, null, __jsx(TextField, {\n      label: \"Image Name\",\n      value: item.filename,\n      onChange: handleImageName,\n      placeholder: \"Enter image name\",\n      error: imageNameError\n    })), __jsx(Stack.Item, null, __jsx(Autocomplete, {\n      options: options,\n      selected: selectedOptions,\n      onSelect: updateSelection,\n      textField: __jsx(Autocomplete.TextField, {\n        onChange: updateText,\n        label: \"Image Category\",\n        value: item.category,\n        placeholder: \"Enter category\",\n        error: imageCategoryError\n      })\n    })))));\n    setModalData(listItems);\n    setActiveModal(true);\n  };\n\n  const promotedBulkActions = [{\n    content: \"Edit Images\",\n    onAction: editImages\n  }, {\n    content: \"Delete Images\",\n    onAction: handleChange\n  }];\n  const bulkActions = [{\n    content: \"Add New Image\",\n    onAction: handleChange\n  }];\n\n  const handleImages = () => {\n    if (file === undefined && imageName === \"\" && categoryValue === \"\") {\n      setImageError(\"Need Image\");\n      setImageNameError(\"Need Image Name\");\n      setCategoryError(\"Need Category\");\n      return;\n    } else if (file === undefined && imageName === \"\") {\n      setImageError(\"Need Image\");\n      setImageNameError(\"Need Image Name\");\n    } else if (file === undefined && categoryValue === \"\") {\n      setImageError(\"Need Image\");\n      setCategoryError(\"Need Category\");\n    } else if (imageName === \"\" && categoryValue === \"\") {\n      setImageNameError(\"Need Image Name\");\n      setCategoryError(\"Need Category\");\n    } else if (file === undefined) {\n      setImageError(\"Need Image\");\n      return;\n    } else if (imageName === \"\") {\n      setImageNameError(\"Need Image Name\");\n      return;\n    } else if (categoryValue === \"\") {\n      setCategoryError(\"Need Category\");\n      return;\n    }\n\n    setLoding(true);\n\n    for (let i in backgroundData) {\n      let item = backgroundData[i]; // console.log(item)\n\n      if (item.filename === imageName) {\n        setImageNameError(\"Image Name Exist\");\n        return;\n      }\n    }\n\n    let formdata = new FormData();\n    formdata.append(\"file\", file);\n    formdata.append(\"filename\", imageName);\n    formdata.append(\"category\", categoryValue);\n    axios.post(\"http://localhost:3000/background\", formdata, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      if (res.data === \"success\") {\n        setFlag(0);\n        setActiveModal(false);\n        setFile();\n        setimageName(\"\");\n        setCategoryValue(\"\");\n        setLoding(false);\n        console.log(res.data);\n      } else {\n        console.log(res.data);\n      }\n    });\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        if (!flag) {\n          let response = await axios.get(\"http://localhost:3000/background\");\n          setBackgroundData(response.data);\n          let allCategorys = [];\n\n          for (let i in backgroundData) {\n            allCategorys.push(backgroundData[i].category);\n          }\n\n          let filterCategory = allCategorys.filter(function (elem, index, self) {\n            return index === self.indexOf(elem);\n          });\n          let categoryArr = [];\n\n          for (let i in filterCategory) {\n            let item = filterCategory[i];\n            categoryArr.push({\n              value: item,\n              label: item\n            });\n          }\n\n          setBackgroundCategory(categoryArr);\n          let imageItemsData = [];\n\n          for (let i in backgroundData) {\n            let item = backgroundData[i];\n            imageItemsData.push({\n              id: item._id,\n              name: item.filename,\n              category: item.category,\n              media: __jsx(Thumbnail, {\n                source: item.filepath,\n                alt: item.filename\n              })\n            });\n          }\n\n          setimageItems(imageItemsData);\n          setFlag(1);\n        }\n      } catch (e) {\n        console.log(`Axios request failed: ${e}`);\n      }\n    }\n\n    fetchData();\n  });\n  return __jsx(\"div\", null, __jsx(Layout, null, __jsx(Layout.Section, null, __jsx(Card, {\n    title: \"Background Images\",\n    actions: [{\n      content: \"Add Background Image\",\n      onAction: handleChange\n    }]\n  }, __jsx(Card.Section, null, __jsx(ResourceList, {\n    resourceName: {\n      singular: \"image\",\n      plural: \"images\"\n    },\n    items: imageItems,\n    selectedItems: selectedItems,\n    onSelectionChange: setSelectedItems,\n    promotedBulkActions: promotedBulkActions,\n    bulkActions: bulkActions,\n    renderItem: item => {\n      const {\n        id,\n        name,\n        media,\n        category\n      } = item;\n      return __jsx(ResourceList.Item, {\n        id: id,\n        media: media,\n        accessibilityLabel: `View details for ${name}`\n      }, __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 12\n        }\n      }, \"Name: \"), name)), __jsx(\"h3\", null, __jsx(TextStyle, {\n        variation: \"strong\"\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: 12\n        }\n      }, \"Category: \"), category)));\n    }\n  }))))), __jsx(Modal, {\n    open: activeModal,\n    onClose: handleChange,\n    title: \"Add Image\",\n    primaryAction: {\n      content: \"Add\",\n      onAction: handleImages\n    },\n    style: {\n      padding: \"20px\"\n    },\n    loading: loading\n  }, __jsx(\"div\", null, modalData)));\n}","map":{"version":3,"sources":["E:/Lenny/blendapp/pages/index.js"],"names":["React","useCallback","useState","useEffect","useRef","axios","Modal","Autocomplete","InlineError","Stack","DropZone","TextField","Layout","Card","TextStyle","ResourceList","Thumbnail","Background","flag","setFlag","backgroundData","setBackgroundData","backgroundCategory","setBackgroundCategory","imageItems","setimageItems","loading","setLoding","activeModal","setActiveModal","openFileDialog","setOpenFileDialog","file","setFile","imageError","setImageError","imageName","setimageName","imageNameError","setImageNameError","selectedOptions","setSelectedOptions","categoryValue","setCategoryValue","options","setOptions","imageCategoryError","setCategoryError","selectedItems","setSelectedItems","handleChange","toggleOpenFileDialog","validImageTypes","handleDropZoneDrop","_dropFiles","acceptedFiles","_rejectedFiles","fileUpload","uploadedFile","name","indexOf","type","window","URL","createObjectURL","handleImageName","newValue","updateText","value","filterRegex","RegExp","resultOptions","filter","option","label","match","err","console","log","message","updateSelection","selected","textField","modalInit","width","height","modalData","setModalData","editImages","imageData","i","selectedItem","j","dataItem","_id","push","listItems","map","item","filename","filepath","category","promotedBulkActions","content","onAction","bulkActions","handleImages","undefined","formdata","FormData","append","post","headers","then","res","data","fetchData","response","get","allCategorys","filterCategory","elem","index","self","categoryArr","imageItemsData","id","media","e","singular","plural","fontSize","padding"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Modal,\r\n  Autocomplete,\r\n  InlineError,\r\n  Stack,\r\n  DropZone,\r\n  TextField,\r\n  Layout,\r\n  Card,\r\n  TextStyle,\r\n  ResourceList,\r\n  Thumbnail\r\n} from \"@shopify/polaris\";\r\n\r\nexport default function Background() {\r\n  const [flag, setFlag] = useState(0);\r\n  const [backgroundData, setBackgroundData] = useState([]);\r\n  const [backgroundCategory, setBackgroundCategory] = useState([]);\r\n  const [imageItems, setimageItems] = useState([]);\r\n  const [loading, setLoding] = useState(false);\r\n  const [activeModal, setActiveModal] = useState(false);\r\n  const [openFileDialog, setOpenFileDialog] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [imageError, setImageError] = useState(\"\");\r\n  const [imageName, setimageName] = useState(\"\");\r\n  const [imageNameError, setImageNameError] = useState(\"\");\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [categoryValue, setCategoryValue] = useState(\"\");\r\n  const [options, setOptions] = useState(backgroundCategory);\r\n  const [imageCategoryError, setCategoryError] = useState(\"\");\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n  const handleChange = useCallback(() => setActiveModal(!activeModal), [\r\n    activeModal\r\n  ]);\r\n  const toggleOpenFileDialog = useCallback(\r\n    () => setOpenFileDialog(openFileDialog => !openFileDialog),\r\n    []\r\n  );\r\n  const validImageTypes = [\"image/gif\", \"image/jpeg\", \"image/png\"];\r\n  const handleDropZoneDrop = useCallback(\r\n    (_dropFiles, acceptedFiles, _rejectedFiles) => {\r\n      setFile(file => acceptedFiles[0]);\r\n      setImageError(\"\");\r\n    },\r\n    []\r\n  );\r\n  const fileUpload = !file && <DropZone.FileUpload />;\r\n  const uploadedFile = file && (\r\n    <Stack>\r\n      <Thumbnail\r\n        size=\"large\"\r\n        alt={file.name}\r\n        source={\r\n          validImageTypes.indexOf(file.type) > 0\r\n            ? window.URL.createObjectURL(file)\r\n            : \"https://cdn.shopify.com/s/files/1/0757/9955/files/New_Post.png?12678548500147524304\"\r\n        }\r\n      />\r\n    </Stack>\r\n  );\r\n  const handleImageName = useCallback(newValue => {\r\n    setimageName(newValue);\r\n    setImageNameError(\"\");\r\n  }, []);\r\n\r\n  const updateText = useCallback(\r\n    value => {\r\n      setCategoryValue(value);\r\n      if (value === \"\") {\r\n        setOptions(backgroundCategory);\r\n        return;\r\n      }\r\n      try {\r\n        const filterRegex = new RegExp(value, \"i\");\r\n        const resultOptions = backgroundCategory.filter(option =>\r\n          option.label.match(filterRegex)\r\n        );\r\n        setOptions(resultOptions);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n      setCategoryError(\"\");\r\n    },\r\n    [backgroundCategory]\r\n  );\r\n\r\n  const updateSelection = useCallback(selected => {\r\n    updateText(selected[0]);\r\n    setSelectedOptions(selected);\r\n    setCategoryValue(selected[0]);\r\n  }, []);\r\n\r\n  const textField = (\r\n    <Autocomplete.TextField\r\n      onChange={updateText}\r\n      label=\"Image Category\"\r\n      value={categoryValue}\r\n      placeholder=\"Enter category\"\r\n      error={imageCategoryError}\r\n    />\r\n  );\r\n\r\n  const modalInit = (\r\n    <Modal.Section>\r\n      <Stack alignment=\"center\">\r\n        <Stack.Item>\r\n          <div style={{ width: 100, height: 100 }}>\r\n            <DropZone\r\n              openFileDialog={openFileDialog}\r\n              onDrop={handleDropZoneDrop}\r\n              onFileDialogClose={toggleOpenFileDialog}\r\n            >\r\n              {fileUpload}\r\n              {uploadedFile}\r\n            </DropZone>\r\n            <InlineError message={imageError} />\r\n          </div>\r\n        </Stack.Item>\r\n        <Stack.Item>\r\n          <TextField\r\n            label=\"Image Name\"\r\n            value={imageName}\r\n            onChange={handleImageName}\r\n            placeholder=\"Enter image name\"\r\n            error={imageNameError}\r\n          />\r\n        </Stack.Item>\r\n        <Stack.Item>\r\n          <Autocomplete\r\n            options={options}\r\n            selected={selectedOptions}\r\n            onSelect={updateSelection}\r\n            textField={textField}\r\n          />\r\n        </Stack.Item>\r\n      </Stack>\r\n    </Modal.Section>\r\n  );\r\n\r\n  const [modalData, setModalData] = useState(modalInit);\r\n\r\n  const editImages = () => {\r\n    let imageData = [];\r\n    for (let i in selectedItems) {\r\n      let selectedItem = selectedItems[i];\r\n      for (let j in backgroundData) {\r\n        let dataItem = backgroundData[j];\r\n        if (selectedItem === dataItem._id) {\r\n          imageData.push(dataItem);\r\n        }\r\n      }\r\n    }\r\n    const listItems = imageData.map(item => (\r\n      <Modal.Section>\r\n        <Stack alignment=\"center\">\r\n          <Stack.Item>\r\n            <div style={{ width: 100, height: 100 }}>\r\n              <DropZone\r\n                openFileDialog={openFileDialog}\r\n                onDrop={handleDropZoneDrop}\r\n                onFileDialogClose={toggleOpenFileDialog}\r\n              >\r\n                <Stack>\r\n                  <Thumbnail\r\n                    size=\"large\"\r\n                    alt={item.filename}\r\n                    source={item.filepath}\r\n                  />\r\n                </Stack>\r\n              </DropZone>\r\n              <InlineError message={imageError} />\r\n            </div>\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n            <TextField\r\n              label=\"Image Name\"\r\n              value={item.filename}\r\n              onChange={handleImageName}\r\n              placeholder=\"Enter image name\"\r\n              error={imageNameError}\r\n            />\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n            <Autocomplete\r\n              options={options}\r\n              selected={selectedOptions}\r\n              onSelect={updateSelection}\r\n              textField={\r\n                <Autocomplete.TextField\r\n                  onChange={updateText}\r\n                  label=\"Image Category\"\r\n                  value={item.category}\r\n                  placeholder=\"Enter category\"\r\n                  error={imageCategoryError}\r\n                />\r\n              }\r\n            />\r\n          </Stack.Item>\r\n        </Stack>\r\n      </Modal.Section>\r\n    ));\r\n    setModalData(listItems);\r\n    setActiveModal(true)\r\n  };\r\n\r\n  const promotedBulkActions = [\r\n    {\r\n      content: \"Edit Images\",\r\n      onAction: editImages\r\n    },\r\n    {\r\n      content: \"Delete Images\",\r\n      onAction: handleChange\r\n    }\r\n  ];\r\n\r\n  const bulkActions = [\r\n    {\r\n      content: \"Add New Image\",\r\n      onAction: handleChange\r\n    }\r\n  ];\r\n\r\n  const handleImages = () => {\r\n    if (file === undefined && imageName === \"\" && categoryValue === \"\") {\r\n      setImageError(\"Need Image\");\r\n      setImageNameError(\"Need Image Name\");\r\n      setCategoryError(\"Need Category\");\r\n      return;\r\n    } else if (file === undefined && imageName === \"\") {\r\n      setImageError(\"Need Image\");\r\n      setImageNameError(\"Need Image Name\");\r\n    } else if (file === undefined && categoryValue === \"\") {\r\n      setImageError(\"Need Image\");\r\n      setCategoryError(\"Need Category\");\r\n    } else if (imageName === \"\" && categoryValue === \"\") {\r\n      setImageNameError(\"Need Image Name\");\r\n      setCategoryError(\"Need Category\");\r\n    } else if (file === undefined) {\r\n      setImageError(\"Need Image\");\r\n      return;\r\n    } else if (imageName === \"\") {\r\n      setImageNameError(\"Need Image Name\");\r\n      return;\r\n    } else if (categoryValue === \"\") {\r\n      setCategoryError(\"Need Category\");\r\n      return;\r\n    }\r\n    setLoding(true);\r\n    for (let i in backgroundData) {\r\n      let item = backgroundData[i];\r\n      // console.log(item)\r\n      if (item.filename === imageName) {\r\n        setImageNameError(\"Image Name Exist\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    let formdata = new FormData();\r\n    formdata.append(\"file\", file);\r\n    formdata.append(\"filename\", imageName);\r\n    formdata.append(\"category\", categoryValue);\r\n    axios\r\n      .post(\"http://localhost:3000/background\", formdata, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\"\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.data === \"success\") {\r\n          setFlag(0);\r\n          setActiveModal(false);\r\n          setFile();\r\n          setimageName(\"\");\r\n          setCategoryValue(\"\");\r\n          setLoding(false);\r\n          console.log(res.data);\r\n        } else {\r\n          console.log(res.data);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        if (!flag) {\r\n          let response = await axios.get(\"http://localhost:3000/background\");\r\n          setBackgroundData(response.data);\r\n          let allCategorys = [];\r\n          for (let i in backgroundData) {\r\n            allCategorys.push(backgroundData[i].category);\r\n          }\r\n          let filterCategory = allCategorys.filter(function(elem, index, self) {\r\n            return index === self.indexOf(elem);\r\n          });\r\n          let categoryArr = [];\r\n          for (let i in filterCategory) {\r\n            let item = filterCategory[i];\r\n            categoryArr.push({\r\n              value: item,\r\n              label: item\r\n            });\r\n          }\r\n          setBackgroundCategory(categoryArr);\r\n          let imageItemsData = [];\r\n          for (let i in backgroundData) {\r\n            let item = backgroundData[i];\r\n            imageItemsData.push({\r\n              id: item._id,\r\n              name: item.filename,\r\n              category: item.category,\r\n              media: <Thumbnail source={item.filepath} alt={item.filename} />\r\n            });\r\n          }\r\n          setimageItems(imageItemsData);\r\n          setFlag(1);\r\n        }\r\n      } catch (e) {\r\n        console.log(`Axios request failed: ${e}`);\r\n      }\r\n    }\r\n    fetchData();\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <Layout.Section>\r\n          <Card\r\n            title=\"Background Images\"\r\n            actions={[\r\n              {\r\n                content: \"Add Background Image\",\r\n                onAction: handleChange\r\n              }\r\n            ]}\r\n          >\r\n            <Card.Section>\r\n              <ResourceList\r\n                resourceName={{ singular: \"image\", plural: \"images\" }}\r\n                items={imageItems}\r\n                selectedItems={selectedItems}\r\n                onSelectionChange={setSelectedItems}\r\n                promotedBulkActions={promotedBulkActions}\r\n                bulkActions={bulkActions}\r\n                renderItem={item => {\r\n                  const { id, name, media, category } = item;\r\n\r\n                  return (\r\n                    <ResourceList.Item\r\n                      id={id}\r\n                      media={media}\r\n                      accessibilityLabel={`View details for ${name}`}\r\n                    >\r\n                      <h3>\r\n                        <TextStyle variation=\"strong\">\r\n                          <span style={{ fontSize: 12 }}>Name: </span>\r\n                          {name}\r\n                        </TextStyle>\r\n                      </h3>\r\n                      <h3>\r\n                        <TextStyle variation=\"strong\">\r\n                          <span style={{ fontSize: 12 }}>Category: </span>\r\n                          {category}\r\n                        </TextStyle>\r\n                      </h3>\r\n                    </ResourceList.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </Card.Section>\r\n          </Card>\r\n        </Layout.Section>\r\n      </Layout>\r\n      <Modal\r\n        open={activeModal}\r\n        onClose={handleChange}\r\n        title=\"Add Image\"\r\n        primaryAction={{\r\n          content: \"Add\",\r\n          onAction: handleImages\r\n        }}\r\n        style={{ padding: \"20px\" }}\r\n        loading={loading}\r\n      >\r\n        <div>{modalData}</div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}